use Getopt::Std;
use File::Path;
use strict;
use File::Basename qw(basename);

# Notes: None

# AUTHOR: Shale Dames
# VALIDATED: Shale Dames 
# genseqar01 VALIDATION: Shale Dames 

#  ABOUT
#  ConvertAndVCFFromBed.pl is designed to be used to generate depth of coverage and annotated vcf files from fastq files.  This is especially useful when examining old bam files with new bed files or extracting exome data for certain gene sets.
	#  Uses GATK to process DepthOfCoverage by region--NOT PER BASE
	#  Creates vcf using Freebayes
	#  Annotates vcf using snpEff

#	USAGE
	#  Process bed file using BedConverter.pl
	# 1.  Run script: $ perl ConvertAndVCFFromBed.pl from directory containing the fastq files you wish to process
	# 2.  Enter bed file name at prompt
	# 3.  Enter bam file names at prompt
	# 4.  Enter name name of output file

START:	
### BEGIN SCRIPT INFO
print "\nConvertAndVCFFromBed.pl \n"; # VERSION INFORMATION
	print "\nSHALE DAMES FEBRUARY 2015\n"; # DATE VALIDATED
print "\nEXTRACTS ALL GENES IN SUPPLIED BED FILE AND GENERATES VCFS, AND COVERAGE INFORMATION FROM A BAM FILE.";
### END SCRIPT INFO

### BED FILE INPUT	
print "\n\nBED FILE INPUT\n"; # printed text
	print "\n/mnt/research1/projects/shale_d/bed_files DIRECTORY LISTING\n\n"; # printed text
	system ("ls -hlat /mnt/research1/projects/shale_d/bed_files\n");
	print "\nEnter the name of bed file for the extraction:\n"; # printed text, enter the bed file
	BED:
	my $bedpath = "/mnt/research1/projects/shale_d/bed_files/"; # Shale's path to bed directory
	my $bed = <STDIN>;# bed file input
	my $bed1 = "$bedpath$bed"; # Calls the correct directory plus the bed file 
	chomp $bed1;
	unless (open (bed1, $bed1) ) 
					{
	print "\nSorry.  The file \"$bed1\" is either misspelled or not in this directory--TRY AGAIN\n"; # printed text
goto BED; # goes to "BED:"
					}
### END BED FILE INPUT

### BAM FILE INPUT	
print "\n\nBAM FILE INPUT\n"; # printed text
	print "\nCURRENT DIRECTORY LISTING\n\n"; # printed text
	system ("ls -hlat \n");
	print "\nEnter the name of bam file for the extraction:\n"; # printed text, enter the bed file
	BAM:
	my $bam = <STDIN>;# bam file input
	chomp $bam;
	unless (open (bam, $bam) ) 
					{
	print "\nSorry.  The file \"$bam\" is either misspelled or not in this directory--TRY AGAIN\n"; # printed text
goto BAM; # goes to "BAM:"					
					}
### END BAM FILE INPUT

### BEGIN OUTPUT FILE NAME
print "\nWhat would you like to name the output files? This will be tagged on all of the output files:\n"; # asks for name of sam file for output ($file)
	my $file = <STDIN>; #file = name of alignment file
	my $panel = "will be output sample name for vcf and depth of coverage files\n"; # printed text		
	chomp $file;
	chomp $panel;
print "\nFile name = $file $panel\n"; # prints output file name that was entered
### END OUTPUT FILE NAME

### CREATE NM.TXT FILE FROM BED FILE
my $tmp = system ("cp $bed1 tmp.txt");  # makes temp file
	system ("cut -f4 tmp.txt | sed 's/_cds.*//' > input.txt"); # extracts column 4 from tmp.txt and removes all but NM_<number>
	system ("uniq input.txt > NM.txt"); # removes duplicate NMs
	print "\nCreate NM.txt file\n"; # printed text
	print "\nLine count input (bed file) and NM.txt (unique NM)\n"; # printed text
	system ("wc -l input.txt NM.txt"); # provides line count information of pre and post duplicate line removal
system ("rm tmp.txt input.txt"); # removes unwanted files
### COMPLETE NM.TXT FILE FROM BED FILE

### BEGIN INTERVAL DEPTH OF COVERAGE
print "\nDepth of Coverage Calculations--$bed\n";
system ("java -Xmx8g -jar /mnt/research1/tools/GenomeAnalysisTK-3.1-1/GenomeAnalysisTK.jar -T DepthOfCoverage -L $bed1 -omitBaseOutput -o SdE5ZCh3 -I $bam -R /mnt/research1/reference/human_g1k_v37.fasta");
# Process description: Creates depth of coverage calculations based on bed file interval coordinates
	# java -Xmx8g -jar • java jar to use 8 GB of RAM for processing GATK jarfile
	# /mnt/research1/tools/GenomeAnalysisTK-3.1-1/GenomeAnalysisTK.jar • clinical GATK location
	# -T • required, analysis type
	# DepthOfCovergae •  GATK depth of coverage module
	# -L: • intervals (bed file coordinates)
	# input bed file • location and name of bed file
	# -omitBaseOutput • OPTION: does not perform base-by-base depth of coverage statistics (saves significant time)
	#  -o • output file: SdE5ZCh3 (random 8-mer names, renamed at end of analysis)
	# -I • required, input file $bam
	# -R • required, reference sequence
	# /mnt/research1/reference/human_g1k_v37.fasta • location and version of clinical reference genome
	system ("cp SdE5ZCh3.sample_interval_summary $file.IntervalDepth.txt"); # copy to rename interval coverage file for all genes
system ("rm SdE5ZCh3*"); # removes files generated by DepthOfCoverage
### END INTERVAL DEPTH OF COVERAGE

### EXTRACT LOW COVERAGE INFORMATION
print "\nExtracting low coverage regions form $file.IntervalDepth.txt:\n";
	system ("cut -f1,2,3,9 $file.IntervalDepth.txt | sed '1d' > TotalTargets"); # extracts column 4 from tmp.txt and removes all but NM_<number>
	system ("sort -n -k4 TotalTargets > $file.SortedDepothOfCoverage.txt"); # sorts depth of coverage information numerically (-n) by column 4 (-k4)
	system ("sed '/100.0/d' $file.SortedDepothOfCoverage.txt > LowCoverage"); # removes all lines with "100.0"
	print "\nLine count total targets and low covergae\n"; # printed text
	system ("wc -l LowCoverage TotalTargets\n"); # provides line count information of pre and post duplicate line removal
	print "\nREGIONS OF LOW COVERAGE:"; # printed text
	print "\nChr. position\t\tTotal\tAve.\t%>15-flold\n"; # printed header
	system ("cat LowCoverage"); # prints LowCoverage File










### COMPLETE EXTRACT LOW COVERAGE INFORMATION

